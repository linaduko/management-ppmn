# uwsgi.ini file
[uwsgi]

# This option tells uWSGI to fail to start if any parameter in the config file isn't explicitly understood by uWSGI.
strict          = true

# The base directory (full path)
chdir           = /var/www/html

# Wsgi file
module          = config.wsgi

# The master uWSGI process is necessary to gracefully re-spawn and pre-fork workers, consolidate logs, and manage 
# many other features. 
master          = true

# Maximum number of worker processes
processes       = 10

# Enable Python threads
enable-threads  = true
threads         = 2

# Without this feature, `kill`, or any tool that sends SIGTERM (such as some system monitoring tools) would attempt to 
# kill uWSGI without success.
die-on-term = true

# This option will instruct uWSGI to clean up any temporary files or UNIX sockets it created, such as HTTP sockets,
# pidfiles, or admin FIFOs.
vacuum          = true

# This parameter prevents uWSGI from starting if it is unable to find or load application module.
need-app        = true

# The socket 
socket          = :80
chmod-socket    = 664

# Logging
disable-logging = true

# These parameters re-enable uWSGIâ€™s built-in logging for responses with HTTP status codes of 4xx or 5xx.
log-4xx = true
log-5xx = true
  


# Worker recycling

# Restart workers after this many requests
max-requests = 1000
# Restart workers after this many seconds                   
max-worker-lifetime = 3600           
# Restart workers after this much resident memory
reload-on-rss = 2048                
# How long to wait before forcefully killing workers 
worker-reload-mercy = 60            



# Dynamic worker scaling

# The master process will spawn workers in response to traffic increases and gradually shut workers 
# down as traffic subsides.
cheaper-algo = busyness
# Maximum number of workers allowed
processes = 500
# Minimum number of workers allowed
cheaper = 8
# Workers created at startup
cheaper-initial = 16
# Length of a cycle in seconds
cheaper-overload = 10
# How many workers to spawn at a time
cheaper-step = 16

# How many cycles to wait before killing workers
cheaper-busyness-multiplier = 30
# Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-min = 20
# Above this threshold, spawn new workers
cheaper-busyness-max = 70
# Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-alert = 16
# How many emergegency workers to create if there are too many requests in the queue
cheaper-busyness-backlog-step = 2



# Process names of uWSGI workers
auto-procname = true

# DO NOT USE IN PRODUCTION
py-autoreload   = 2

